[
  {
    "objectID": "features.html",
    "href": "features.html",
    "title": "Features",
    "section": "",
    "text": "Let’s see some of Specification Curve’s features in action."
  },
  {
    "objectID": "features.html#basic-use",
    "href": "features.html#basic-use",
    "title": "Features",
    "section": "Basic Use",
    "text": "Basic Use\nHere’s an example of using Specification Curve. Note that, in the below, we can pass strings or lists of string into the arguments of the class SpecificationCurve. The programme then automatically performs all of possible regressions of endogeneous variables on exogeneous variables and controls. The estimate that is picked out is the coefficient on the given combination of endogeneous and exogenous variables (with conditioning on the given controls).\nIf a control variable is categorical, rather than continuous, it will be treated as a fixed effect.\n\nimport specification_curve as specy\n\ndf = specy.load_example_data1()\ny_endog = \"y1\"  # endogeneous variable\nx_exog = \"x1\"  # exogeneous variable\ncontrols = [\"c1\", \"c2\", \"group1\", \"group2\"]\nsc = specy.SpecificationCurve(\n    df,\n    y_endog,\n    x_exog,\n    controls,\n)\nsc.fit()\nsc.plot()\n\nFit complete\n\n\n\n\n\nGrey squares (black lines when there are many specifications) show whether a variable is included in a specification or not. Blue or red markers and error bars show whether the coefficient is positive and significant (at the 0.05 level) or red and significant, respectively."
  },
  {
    "objectID": "features.html#retrieving-estimates",
    "href": "features.html#retrieving-estimates",
    "title": "Features",
    "section": "Retrieving estimates",
    "text": "Retrieving estimates\nYou can retrieve the estimates from the data frame:\n\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls)\nsc.fit()\nsc.df_r.head()\n\nFit complete\n\n\n\n\n\n\n\n\n\nx_exog\ny_endog\nResults\nCoefficient\nSpecification\nbse\nconf_int\npvalues\nSpecificationCounts\n\n\nSpecification No.\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nx1\ny1\n&lt;statsmodels.regression.linear_model.Regressio...\n6.205962\n[c1, c2, x1, y1]\n0.385317\n[5.448896340566625, 6.963027714134414]\n{'x1': 3.357166814264534e-47, 'c1': 4.04817525...\n{'c1': 1, 'c2': 1, 'x1': 1, 'y1': 1}\n\n\n1\nx1\ny1\n&lt;statsmodels.regression.linear_model.Regressio...\n6.205962\n[c1, c2, group1, x1, y1]\n0.385317\n[5.448896340566625, 6.963027714134414]\n{'x1': 3.357166814264534e-47, 'c1': 4.04817525...\n{'c1': 1, 'c2': 1, 'group1': 1, 'x1': 1, 'y1': 1}\n\n\n2\nx1\ny1\n&lt;statsmodels.regression.linear_model.Regressio...\n6.205962\n[c1, c2, group2, x1, y1]\n0.385317\n[5.448896340566625, 6.963027714134414]\n{'x1': 3.357166814264534e-47, 'c1': 4.04817525...\n{'c1': 1, 'c2': 1, 'group2': 1, 'x1': 1, 'y1': 1}\n\n\n3\nx1\ny1\n&lt;statsmodels.regression.linear_model.Regressio...\n6.205962\n[c1, c2, group1, group2, x1, y1]\n0.385317\n[5.448896340566625, 6.963027714134414]\n{'x1': 3.357166814264534e-47, 'c1': 4.04817525...\n{'c1': 1, 'c2': 1, 'group1': 1, 'group2': 1, '...\n\n\n4\nx1\ny1\n&lt;statsmodels.regression.linear_model.Regressio...\n6.492386\n[c1, x1, y1]\n0.592879\n[5.327511339458264, 7.657260911796476]\n{'x1': 3.922713328081985e-25, 'c1': 2.18937700...\n{'c1': 1, 'x1': 1, 'y1': 1}"
  },
  {
    "objectID": "features.html#saving-results-to-file",
    "href": "features.html#saving-results-to-file",
    "title": "Features",
    "section": "Saving results to file",
    "text": "Saving results to file\nSave the plot to file (the format is inferred from file extension):\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls,\n                                  cat_expand=['group1'])\nsc.fit()\nsc.plot(save_path='test_fig.pdf')"
  },
  {
    "objectID": "features.html#expanding-a-categorical-variable",
    "href": "features.html#expanding-a-categorical-variable",
    "title": "Features",
    "section": "Expanding a categorical variable",
    "text": "Expanding a categorical variable\nShould you need to, you can expand a categorical variable into its different elements and run those separately. In the example below, the \"group2\" categorical variable is expanded like this.\n\ny_endog = \"y1\"  # endogeneous variable\nx_exog = \"x1\"  # exogeneous variable\ncontrols = [\"c1\", \"c2\", \"group1\", \"group2\"]\nsc = specy.SpecificationCurve(\n    df,\n    y_endog,\n    x_exog,\n    controls,\n    cat_expand=[\"group2\"],  # have each fixed effect run separately\n)\nsc.fit()\nsc.plot()\n\nFit complete"
  },
  {
    "objectID": "features.html#using-multiple-exogeneous-variables",
    "href": "features.html#using-multiple-exogeneous-variables",
    "title": "Features",
    "section": "Using multiple exogeneous variables",
    "text": "Using multiple exogeneous variables\nSometimes, you’d like to check different independent variables (and the coefficients they come with following a regression). This is achieved by passing a list to the exogeneous argument of SpecificationCurve. These variations on the independent variables are labelled by x in the plot.\n\ndf = specy.load_example_data1()\nx_exog = [\"x1\", \"x2\"]\ny_endog = \"y1\"\ncontrols = [\"c1\", \"c2\", \"group1\", \"group2\"]\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls)\nsc.fit()\nsc.plot()\n\nFit complete"
  },
  {
    "objectID": "features.html#excluding-some-combinations-of-controls",
    "href": "features.html#excluding-some-combinations-of-controls",
    "title": "Features",
    "section": "Excluding some combinations of controls",
    "text": "Excluding some combinations of controls\nSome controls may be redundant, and you might want to exclude them both being used together. The exclu_grps keyword argument achieves this.\nIn the below example, \"c1\" and \"c2\" are never run in the same specification.\n\ndf = specy.load_example_data1()\n\ny_endog = \"y1\"\nx_exog = \"x1\"\ncontrols = [\"c1\", \"c2\", \"group1\", \"group2\"]\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls, exclu_grps=[[\"c1\", \"c2\"]])\nsc.fit()\nsc.plot()\n\nFit complete"
  },
  {
    "objectID": "features.html#always-include-some-controls-in-all-specifications",
    "href": "features.html#always-include-some-controls-in-all-specifications",
    "title": "Features",
    "section": "Always include some controls in all specifications",
    "text": "Always include some controls in all specifications\nLikewise, there will be times when you always wish to include a particular control in specifications, and to show this on the plot. The always_include= keyword argument helps you to achieve this.\nIn the example below, we ask that \"c1\" is included in every specification.\n\ndf = specy.load_example_data1()\nx_exog = \"x1\"\ny_endog = \"y1\"\ncontrols = [\"c2\", \"group1\", \"group2\"]\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls, always_include=\"c1\")\nsc.fit()\nsc.plot()\n\nFit complete"
  },
  {
    "objectID": "features.html#flexing-the-style-for-very-large-numbers-of-specifications",
    "href": "features.html#flexing-the-style-for-very-large-numbers-of-specifications",
    "title": "Features",
    "section": "Flexing the style for very large numbers of specifications",
    "text": "Flexing the style for very large numbers of specifications\nThe default plot type isn’t suitable for very large numbers of specifications, but it does automatically switch to a style suited to a large number of specifications.\nHere’s an example\n\nimport numpy as np\nimport pandas as pd\n\n# Set seed for random numbers\nseed_for_prng = 78557\n# prng=probabilistic random number generator\nprng = np.random.default_rng(seed_for_prng)\n\n\n# Generate some fake data\n\nn_samples = 400\n# Number of dimensions of continuous\nn_dim = 8\nc_rnd_vars = prng.random(size=(n_dim, n_samples))\nc_rnd_vars_names = [f\"c_{i}\" for i in range(np.shape(c_rnd_vars)[0])]\ny_1 = (\n    0.4 * c_rnd_vars[0, :]  # This is the true value of the coefficient\n    - 0.2 * c_rnd_vars[1, :]\n    + 0.3 * prng.standard_normal(n_samples)\n)\n# Next line causes y_2 ests to be much more noisy\ny_2 = y_1 - 0.3 * np.abs(prng.standard_normal(n_samples))\ndf = pd.DataFrame([y_1, y_2], [\"y1\", \"y2\"]).T\nfor i, col_name in enumerate(c_rnd_vars_names):\n    df[col_name] = c_rnd_vars[i, :]\n\ncontrols = c_rnd_vars_names[1:]\n\n# Run it with Specification Curve\nsc = specy.SpecificationCurve(df, [\"y1\", \"y2\"], c_rnd_vars_names[0], controls)\nsc.fit()\nsc.plot()\n\nFit complete"
  },
  {
    "objectID": "features.html#flagging-a-preferred-specification",
    "href": "features.html#flagging-a-preferred-specification",
    "title": "Features",
    "section": "Flagging a preferred specification",
    "text": "Flagging a preferred specification\nOften, in practice, you will have a preferred specification that you will use as your estimate. You can specify this and have it be flagged.\nYou can achieve this by passing a list of variables that you’d like to be used in your preferred specification via the preferred_spec keyword argument.\nIn the example below, the preferred specification comes out as being close to the known answer that we constructed.\n\nsc = specy.SpecificationCurve(df, [\"y1\", \"y2\"], c_rnd_vars_names[0], controls)\nsc.fit()\nsc.plot(preferred_spec=[\"y1\", c_rnd_vars_names[0]] + controls)\n\nFit complete"
  },
  {
    "objectID": "features.html#using-models-other-than-ordinary-least-squares",
    "href": "features.html#using-models-other-than-ordinary-least-squares",
    "title": "Features",
    "section": "Using models other than Ordinary Least Squares",
    "text": "Using models other than Ordinary Least Squares\nThe default model is OLS, but you can pass through other models too.\n\nimport statsmodels.api as sm\n\n# generate some fake data\nn_samples = 1000\nx_2 = prng.integers(2, size=n_samples)\nx_1 = prng.random(size=n_samples)\nx_3 = prng.integers(3, size=n_samples)\nx_4 = prng.random(size=n_samples)\nx_5 = x_1 + 0.05 * np.random.randn(n_samples)\nx_beta = -1 - 3.5 * x_1 + 0.2 * x_2 + 0.3 * x_3  # NB: coefficient is -3.5\nprob = 1 / (1 + np.exp(-x_beta))\ny = prng.binomial(n=1, p=prob, size=n_samples)\ny2 = prng.binomial(n=1, p=prob * 0.98, size=n_samples)\ndf = pd.DataFrame(\n    [x_1, x_2, x_3, x_4, x_5, y, y2], [\"x_1\", \"x_2\", \"x_3\", \"x_4\", \"x_5\", \"y\", \"y2\"]\n).T\n\n\n# Specify the regressions to run\ny_endog = [\"y\", \"y2\"]\nx_exog = [\"x_1\", \"x_5\"]\ncontrols = [\"x_3\", \"x_2\", \"x_4\"]\nsc = specy.SpecificationCurve(df, y_endog, x_exog, controls)\n# Fit using the logit estimator\nsc.fit(estimator=sm.Logit)  # sm.Probit also works\nsc.plot()\n\nOptimization terminated successfully.\n         Current function value: 0.325863\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.324867\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.325858\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.322285\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.324788\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.317532\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.321525\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.317330\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.332526\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.332235\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.332497\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.327306\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.332093\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.323578\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.326640\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.323385\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.345222\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.344986\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.339378\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.343217\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.339273\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.343176\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.339078\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.338721\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.349988\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.349287\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.343349\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.346967\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.343348\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.346967\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.342701\n         Iterations 7\nOptimization terminated successfully.\n         Current function value: 0.342536\n         Iterations 7\nFit complete"
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributing",
    "section": "",
    "text": "Thank you for your interest in improving this project. This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.\nHere is a list of important resources for contributors:\n\nSource Code\nDocumentation\nIssue Tracker\n\n\n\nReport bugs on the Issue Tracker.\nWhen filing an issue, make sure to answer these questions:\n\nWhich operating system and Python version are you using?\nWhich version of this project are you using?\nWhat did you do?\nWhat did you expect to see?\nWhat did you see instead?\n\nThe best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.\n\n\n\nRequest features on the Issue Tracker.\n\n\n\nYou need Python 3.9+ and the following tools:\n\nPoetry\nNox\nnox-poetry\nMake (for documentation)\nQuarto (for documentation)\n\nBefore you install the environment using poetry, you may wish to run poetry config virtualenvs.in-project true to get the virtual environment in the same folder as the code.\nInstall the package with development requirements:\npoetry install\nYou can now run an interactive Python session, or the command-line interface.\n\n\n\nRun the full test suite:\nnox\nList the available Nox sessions:\nnox --list-sessions\nYou can also run a specific Nox session. For example, invoke the unit test suite like this:\nnox --session=tests\nUnit tests are located in the tests directory, and are written using the pytest testing framework.\n\n\n\nOpen a pull request to submit changes to this project.\nYour pull request needs to meet the following guidelines for acceptance:\n\nThe Nox test suite must pass without errors and warnings.\nInclude unit tests. This project maintains 100% code coverage.\nIf your changes add functionality, update the documentation accordingly.\n\nFeel free to submit early, though—we can always iterate on this.\nLinting and formatting are run as part of pre-commit and nox. To just run pre-commit checks, use poetry run pre-commit run --all-files.\nWe recommend that you open an issue before starting work on any new features. This will allow a chance to talk it over with the owners and validate your approach.\n\n\n\nYou can build the docs locally to look at it. The command is make: this will build the docs and put them in docs/_site/.\nTo publish new docs to GitHub Pages (where the documentation is displayed as web pages), it’s make publish—but only devs with admin rights will be able to execute this.\n\n\n\n\nOpen a new branch with the version name\nChange the version in pyproject.toml\nCommit the change with a new version label as the commit message (checking the tests pass)\nHead to github and merge into main\nDraft a new release based on that most recent merge commit, using the new version as the tag\nConfirm the release draft on gitub\nThe automatic release github action will push to PyPI.\n\nIf you ever need distributable files, you can use the poetry build command locally."
  },
  {
    "objectID": "contributing.html#how-to-report-a-bug",
    "href": "contributing.html#how-to-report-a-bug",
    "title": "Contributing",
    "section": "",
    "text": "Report bugs on the Issue Tracker.\nWhen filing an issue, make sure to answer these questions:\n\nWhich operating system and Python version are you using?\nWhich version of this project are you using?\nWhat did you do?\nWhat did you expect to see?\nWhat did you see instead?\n\nThe best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue."
  },
  {
    "objectID": "contributing.html#how-to-request-a-feature",
    "href": "contributing.html#how-to-request-a-feature",
    "title": "Contributing",
    "section": "",
    "text": "Request features on the Issue Tracker."
  },
  {
    "objectID": "contributing.html#how-to-set-up-your-development-environment",
    "href": "contributing.html#how-to-set-up-your-development-environment",
    "title": "Contributing",
    "section": "",
    "text": "You need Python 3.9+ and the following tools:\n\nPoetry\nNox\nnox-poetry\nMake (for documentation)\nQuarto (for documentation)\n\nBefore you install the environment using poetry, you may wish to run poetry config virtualenvs.in-project true to get the virtual environment in the same folder as the code.\nInstall the package with development requirements:\npoetry install\nYou can now run an interactive Python session, or the command-line interface."
  },
  {
    "objectID": "contributing.html#how-to-test-the-project",
    "href": "contributing.html#how-to-test-the-project",
    "title": "Contributing",
    "section": "",
    "text": "Run the full test suite:\nnox\nList the available Nox sessions:\nnox --list-sessions\nYou can also run a specific Nox session. For example, invoke the unit test suite like this:\nnox --session=tests\nUnit tests are located in the tests directory, and are written using the pytest testing framework."
  },
  {
    "objectID": "contributing.html#how-to-submit-changes",
    "href": "contributing.html#how-to-submit-changes",
    "title": "Contributing",
    "section": "",
    "text": "Open a pull request to submit changes to this project.\nYour pull request needs to meet the following guidelines for acceptance:\n\nThe Nox test suite must pass without errors and warnings.\nInclude unit tests. This project maintains 100% code coverage.\nIf your changes add functionality, update the documentation accordingly.\n\nFeel free to submit early, though—we can always iterate on this.\nLinting and formatting are run as part of pre-commit and nox. To just run pre-commit checks, use poetry run pre-commit run --all-files.\nWe recommend that you open an issue before starting work on any new features. This will allow a chance to talk it over with the owners and validate your approach."
  },
  {
    "objectID": "contributing.html#how-to-build-the-documentation",
    "href": "contributing.html#how-to-build-the-documentation",
    "title": "Contributing",
    "section": "",
    "text": "You can build the docs locally to look at it. The command is make: this will build the docs and put them in docs/_site/.\nTo publish new docs to GitHub Pages (where the documentation is displayed as web pages), it’s make publish—but only devs with admin rights will be able to execute this."
  },
  {
    "objectID": "contributing.html#how-to-create-a-package-release",
    "href": "contributing.html#how-to-create-a-package-release",
    "title": "Contributing",
    "section": "",
    "text": "Open a new branch with the version name\nChange the version in pyproject.toml\nCommit the change with a new version label as the commit message (checking the tests pass)\nHead to github and merge into main\nDraft a new release based on that most recent merge commit, using the new version as the tag\nConfirm the release draft on gitub\nThe automatic release github action will push to PyPI.\n\nIf you ever need distributable files, you can use the poetry build command locally."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "load_example_data1\nRetrieves example data from a file included with the package.\n\n\nload_example_data2\nGenerates fake data.\n\n\n\n\n\n\n\n\n\nSpecificationCurve\nSpecification curve object."
  },
  {
    "objectID": "reference/index.html#functions",
    "href": "reference/index.html#functions",
    "title": "Function reference",
    "section": "",
    "text": "load_example_data1\nRetrieves example data from a file included with the package.\n\n\nload_example_data2\nGenerates fake data."
  },
  {
    "objectID": "reference/index.html#classes",
    "href": "reference/index.html#classes",
    "title": "Function reference",
    "section": "",
    "text": "SpecificationCurve\nSpecification curve object."
  },
  {
    "objectID": "reference/load_example_data2.html",
    "href": "reference/load_example_data2.html",
    "title": "load_example_data2",
    "section": "",
    "text": "load_example_data2\nload_example_data2()\nGenerates fake data. Returns: pd.DataFrame: Example data suitable for regression."
  },
  {
    "objectID": "reference/SpecificationCurve.html",
    "href": "reference/SpecificationCurve.html",
    "title": "SpecificationCurve",
    "section": "",
    "text": "SpecificationCurve(self, df, y_endog, x_exog, controls, exclu_grps=[[None]], cat_expand=[], always_include=[])\nSpecification curve object. Uses a model to perform all variants of a specification. Stores the results of those regressions in a tidy format pandas dataframe. Plots the regressions in chart that can optionally be saved. Will iterate over multiple inputs for exog. and endog. variables. Note that categorical variables that are expanded cannot be mutually excluded from other categorical variables that are expanded.\n\n\n\n\n\nName\nDescription\n\n\n\n\nfit\nFits a specification curve by performing regressions.\n\n\nplot\nMakes plots of fitted specification curve.\n\n\n\n\n\nSpecificationCurve.fit(estimator=sm.OLS)\nFits a specification curve by performing regressions. Args: estimator (statsmodels.regression.linear_model or statsmodels.discrete.discrete_model, optional): statsmodels estimator. Defaults to sm.OLS.\n\n\n\nSpecificationCurve.plot(save_path=None, pretty_plots=True, preferred_spec=[])\nMakes plots of fitted specification curve. Args: save_path (type, optional): Exported fig filename. Defaults to None. pretty_plots (bool, optional): whether to use this package’s figure formatting. Defaults to True. preferred_spec (list, optional): preferred specification. Defaults to []."
  },
  {
    "objectID": "reference/SpecificationCurve.html#methods",
    "href": "reference/SpecificationCurve.html#methods",
    "title": "SpecificationCurve",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfit\nFits a specification curve by performing regressions.\n\n\nplot\nMakes plots of fitted specification curve.\n\n\n\n\n\nSpecificationCurve.fit(estimator=sm.OLS)\nFits a specification curve by performing regressions. Args: estimator (statsmodels.regression.linear_model or statsmodels.discrete.discrete_model, optional): statsmodels estimator. Defaults to sm.OLS.\n\n\n\nSpecificationCurve.plot(save_path=None, pretty_plots=True, preferred_spec=[])\nMakes plots of fitted specification curve. Args: save_path (type, optional): Exported fig filename. Defaults to None. pretty_plots (bool, optional): whether to use this package’s figure formatting. Defaults to True. preferred_spec (list, optional): preferred specification. Defaults to []."
  },
  {
    "objectID": "reference/load_example_data1.html",
    "href": "reference/load_example_data1.html",
    "title": "load_example_data1",
    "section": "",
    "text": "load_example_data1\nload_example_data1()\nRetrieves example data from a file included with the package. Returns: pd.DataFrame: Example data suitable for regression."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Specification Curve",
    "section": "",
    "text": "Specification Curve is a Python package that performs specification curve analysis; it helps with the problem of the “garden of forking paths” (many defensible choices) when doing analysis by running many regressions and summarising the effects in an easy to digest chart."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Specification Curve",
    "section": "Introduction",
    "text": "Introduction\nWhen specifying a causal model, modellers have a number of options. These can be informed by field intelligence, priors, and even misguided attempts to find a significant result. Even with the best of intentions, research teams can reach entirely different conclusions using the same, or similar, data because of different choices made in preparing data or in modelling it.\nTypically this happens when there isn’t a clear way to do “feature engineering” on the data or the data are imperfect in some way. For example, you have a high frequency time series which needs to be aggregated to a lower frequency: you could take the maximum, the minimum, or the average over each high frequency time period. A different choice may be appropriate in different settings.\nThere’s formal evidence that researchers really do make different decisions; one study (Silberzahn et al. 2018) gave the same research question—whether soccer referees are more likely to give red cards to players with dark skin tones than to players with light skin tones—to 29 different teams. From the abstract of that paper:\n\nAnalytic approaches varied widely across the teams, and the estimated effect sizes ranged from 0.89 to 2.93 (Mdn = 1.31) in odds-ratio units. Twenty teams (69%) found a statistically significant positive effect, and 9 teams (31%) did not observe a significant relationship. Overall, the 29 different analyses used 21 unique combinations of covariates. Neither analysts’ prior beliefs about the effect of interest nor their level of expertise readily explained the variation in the outcomes of the analyses. Peer ratings of the quality of the analyses also did not account for the variability.\n\nSo not only can different decisions made, but there seems to be no clearly identifiable reason for them!\nThere have since been a number of papers that find similar conclusions (Huntington-Klein et al. 2021).\nSpecification curves have been invented (Simonsohn, Simmons, and Nelson 2020) as a way to better grasp the garden of forking paths that analysts face, and help them show how sensitive their results are to alternative specifications.\nMore than one piece of software (Masur and Scharkow 2019) has appeared to help researchers and analysts use this technique: specification curve is one such package!"
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "Specification Curve",
    "section": "Quickstart",
    "text": "Quickstart\nYou can try out specification curve right now in Google Colab. To install the package in Colab, run !pip install specification_curve in a new code cell.\nHere’s an example of using Specification Curve.\n\n# import specification curve\n# Generate some fake data\n# ------------------------\nimport numpy as np\nimport pandas as pd\nimport specification_curve as specy\n\n# Set seed for random numbers\nseed_for_prng = 78557\n# prng=probabilistic random number generator\nprng = np.random.default_rng(seed_for_prng)\nn_samples = 400\n# Number of dimensions\nn_dim = 4\nc_rnd_vars = prng.random(size=(n_dim, n_samples))\ny_1 = (\n    0.4 * c_rnd_vars[0, :]  # THIS IS THE TRUE VALUE OF THE COEFFICIENT\n    - 0.2 * c_rnd_vars[1, :]\n    + 0.3 * prng.standard_normal(n_samples)\n)\n# Next line causes y_2 ests to be much more noisy\ny_2 = y_1 - 0.5 * np.abs(prng.standard_normal(n_samples))\n# Put data into dataframe\ndf = pd.DataFrame([y_1, y_2], [\"y1\", \"y2\"]).T\ndf[\"x_1\"] = c_rnd_vars[0, :]\ndf[\"c_1\"] = c_rnd_vars[1, :]\ndf[\"c_2\"] = c_rnd_vars[2, :]\ndf[\"c_3\"] = c_rnd_vars[3, :]\n\n# Specification Curve Analysis\n# -----------------------------\nsc = specy.SpecificationCurve(\n    df, y_endog=[\"y1\", \"y2\"], x_exog=\"x_1\", controls=[\"c_1\", \"c_2\", \"c_3\"]\n)\nsc.fit()\nsc.plot()\n\nFit complete\n\n\n\n\n\nGrey squares (black lines when there are many specifications) show whether a variable is included in a specification or not. Blue or red markers and error bars show whether the coefficient is positive and significant (at the 0.05 level) or red and significant, respectively."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Specification Curve",
    "section": "Installation",
    "text": "Installation\nYou can install Specification Curve via pip:\n$ pip install specification-curve\nTo install the development version from git, use:\n$ pip install git+https://github.com/aeturrell/specification_curve.git"
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Specification Curve",
    "section": "Requirements",
    "text": "Requirements\nYou can find a full list of requirements in the pyproject.toml file. The main requirements are:\n\n\npython &gt;=3.9,&lt;3.12\npandas ^2.0.3\nstatsmodels ^0.14.0\nmatplotlib ^3.6.1\ntypes-setuptools &gt;=67.6,&lt;70.0\nnumpy ^1.26.4\ntypeguard ^4.2.1"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Specification Curve",
    "section": "License",
    "text": "License\nDistributed under the terms of the MIT license."
  },
  {
    "objectID": "index.html#citing-specification-curve",
    "href": "index.html#citing-specification-curve",
    "title": "Specification Curve",
    "section": "Citing Specification Curve",
    "text": "Citing Specification Curve\nYou can find full citation information at the following link: https://zenodo.org/badge/latestdoi/282989537.\nUsing Specification Curve in your paper? Let us know by raising an issue beginning with “citation”."
  },
  {
    "objectID": "index.html#similar-packages",
    "href": "index.html#similar-packages",
    "title": "Specification Curve",
    "section": "Similar Packages",
    "text": "Similar Packages\nIn RStats, there is specr (which inspired many design choices in this package) and spec_chart. Some of the example data in this package is the same as in specr, but please note that results have not been cross-checked across packages."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Specification Curve",
    "section": "References",
    "text": "References\n\n\nHuntington-Klein, Nick, Andreu Arenas, Emily Beam, Marco Bertoni, Jeffrey R Bloem, Pralhad Burli, Naibin Chen, et al. 2021. “The Influence of Hidden Researcher Decisions in Applied Microeconomics.” Economic Inquiry 59 (3): 944–60.\n\n\nMasur, Philipp K., and Michael Scharkow. 2019. “Specr: Statistical Functions for Conducting Specification Curve Analyses (Version 0.2.1).” https://github.com/masurp/specr.\n\n\nSilberzahn, Raphael, Eric L Uhlmann, Daniel P Martin, Pasquale Anselmi, Frederik Aust, Eli Awtrey, Štěpán Bahnı́k, et al. 2018. “Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results.” Advances in Methods and Practices in Psychological Science 1 (3): 337–56.\n\n\nSimonsohn, Uri, Joseph P Simmons, and Leif D Nelson. 2020. “Specification Curve Analysis.” Nature Human Behaviour 4 (11): 1208–14."
  }
]